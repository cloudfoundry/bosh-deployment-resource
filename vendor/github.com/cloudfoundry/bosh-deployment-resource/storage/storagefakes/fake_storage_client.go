// This file was generated by counterfeiter
package storagefakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-deployment-resource/storage"
)

type FakeStorageClient struct {
	DownloadStub        func(filePath string) error
	downloadMutex       sync.RWMutex
	downloadArgsForCall []struct {
		filePath string
	}
	downloadReturns struct {
		result1 error
	}
	UploadStub        func(filePath string) error
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		filePath string
	}
	uploadReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageClient) Download(filePath string) error {
	fake.downloadMutex.Lock()
	fake.downloadArgsForCall = append(fake.downloadArgsForCall, struct {
		filePath string
	}{filePath})
	fake.recordInvocation("Download", []interface{}{filePath})
	fake.downloadMutex.Unlock()
	if fake.DownloadStub != nil {
		return fake.DownloadStub(filePath)
	}
	return fake.downloadReturns.result1
}

func (fake *FakeStorageClient) DownloadCallCount() int {
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	return len(fake.downloadArgsForCall)
}

func (fake *FakeStorageClient) DownloadArgsForCall(i int) string {
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	return fake.downloadArgsForCall[i].filePath
}

func (fake *FakeStorageClient) DownloadReturns(result1 error) {
	fake.DownloadStub = nil
	fake.downloadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) Upload(filePath string) error {
	fake.uploadMutex.Lock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		filePath string
	}{filePath})
	fake.recordInvocation("Upload", []interface{}{filePath})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(filePath)
	}
	return fake.uploadReturns.result1
}

func (fake *FakeStorageClient) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeStorageClient) UploadArgsForCall(i int) string {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].filePath
}

func (fake *FakeStorageClient) UploadReturns(result1 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStorageClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.StorageClient = new(FakeStorageClient)
